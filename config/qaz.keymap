/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define THINGS 1
#define HMM 2

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&gresc>;
            layers = <>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp BACKSPACE>;
            layers = <>;
        };
    };
};

/ {
    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
        ht_bl: balanced-hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED-HOLD-TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            bindings =
                <&kp>,
                <&kp>;
        };
        osm: one_shot_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;// <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&sk>,
                <&kp>;
        };
        
        // TAP DANCES
        bslhpipe: tap_dance_backslash_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BACKSLASH_PIPE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp BSLH>,
                <&kp PIPE>;
        };
        grvtilde: tap_dance_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE_TILDE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp GRAVE>,
                <&kp TILDE>;
        };
        apoquote: tap_dance_apostrophe_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_APOSTROPE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp SQT>,
                <&kp DQT>;
        };
        close: tap_dance_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp LC(F4)>,
                <&kp LA(F4)>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
            &kp Q         &kp W   &kp F      &kp P            &kp B   &kp J         &kp L      &kp U           &kp Y  &kp SEMICOLON
            &kp A         &kp R   &kp S      &kp T            &kp G   &kp M         &kp N      &kp E           &kp I          &kp O
     &mt RSHIFT Z         &kp X   &kp C      &kp D            &kp V   &kp K         &kp H  &kp COMMA  &mt LSHIFT DOT
 &kp LEFT_CONTROL  &kp LEFT_WIN   &none  &kp SPACE  &lt 1 BACKSPACE   &none  &kp LEFT_ALT   &kp FSLH
            >;
        };

        THINGS {
            bindings = <
 &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6       &kp N7      &kp N8  &kp N9  &kp N0
 &trans  &trans  &trans  &trans  &trans  &trans       &trans      &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans       &trans      &trans  &trans
 &trans  &trans   &none   &none  &trans   &none  &bootloader  &bt BT_CLR
            >;
        };

        HMM {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans   &none   &none  &trans   &none  &trans  &trans
            >;
        };
    };
};
