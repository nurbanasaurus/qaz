/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define THINGS 1
#define HMM 2

&kscan0 {
    debounce-press-ms = <100>;
    debounce-release-ms = <100>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&gresc>;
            layers = <0>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp BACKSPACE>;
            layers = <0>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
        };
    };
};

/ {
    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
        ht_bl: balanced-hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED-HOLD-TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            bindings =
                <&kp>,
                <&kp>;
        };
        osm: one_shot_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;// <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings =
                <&sk>,
                <&kp>;
        };

        // TAP DANCES

        bslhpipe: tap_dance_backslash_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BACKSLASH_PIPE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp BSLH>,
                <&kp PIPE>;
        };
        grvtilde: tap_dance_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE_TILDE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp GRAVE>,
                <&kp TILDE>;
        };
        apoquote: tap_dance_apostrophe_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_APOSTROPE_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp SQT>,
                <&kp DQT>;
        };
        close: tap_dance_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp LC(F4)>,
                <&kp LA(F4)>;
        };
        clnsemi: tap_dance_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COLON_SEMICOLON";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp COLON>,
                <&kp SEMICOLON>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <500>;
            quick-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
      &kp Q         &kp W         &kp F        &kp P   &kp B   &kp J        &kp L         &kp U        &kp Y  &clnsemi
      &kp A   &gqt LGUI R  &gqt LCTRL S  &gqt LALT T   &kp G   &kp M  &gqt RALT N  &gqt RCTRL E  &gqt RGUI I     &kp O
      &kp X         &kp C         &kp D        &kp V   &kp Z   &kp K        &kp H     &kp COMMA   &kp PERIOD
 &kp DELETE  &kp LEFT_WIN       &kp TAB    &kp SPACE   &sl 1   &none        &none      &kp FSLH
            >;
        };

        THINGS {
            bindings = <
  &none   &none   &none       &none  &kp UNDERSCORE  &kp MINUS  &kp N7  &kp N8  &kp N9  &kp KP_NUMLOCK
  &sl 3   &none   &none       &none       &kp EQUAL   &kp PLUS  &kp N4  &kp N5  &kp N6       &kp ENTER
  &none  &trans  &trans      &trans        &sk LGUI     &kp N0  &kp N1  &kp N2  &kp N3
  &none  &trans   &none  &sk LSHIFT           &sl 2      &none   &none   &none
            >;
        };

        HMM {
            bindings = <
 &kp EXCL                &kp AT               &kp HASH        &kp DOLLAR        &kp PERCENT       &kp CARET   &kp AMPERSAND      &kp STAR        &grvtilde  &kp DELETE
    &none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW   &apoquote
   &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE            &trans             &trans        &kp HOME         &kp END         &none           &trans
   &trans                &trans                  &none             &to 0              &none           &none          &trans        &trans
            >;
        };

        AH {
            bindings = <
  &none  &trans  &trans           &trans  &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR
 &trans  &trans  &trans  &kp PRINTSCREEN  &trans  &trans  &trans        &trans        &trans      &trans
 &trans  &trans  &trans           &trans  &trans  &trans  &trans        &trans        &reset
 &trans  &trans  &trans           &trans  &trans  &trans  &trans   &bootloader
            >;
        };
    };
};
